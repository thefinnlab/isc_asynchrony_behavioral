#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'accuracy ~ model_type + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results, family=binomial(link='logit')) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
# Load the results file
results_fn<-glue('{results_dir}all-task_group-analyzed-behavior_window-size-25_human-prosody-model-lemmatized.csv')
df_results <- read.csv(results_fn)
df_results <- df_results[!(df_results$modality %in% c('audio', 'text')),]
# ADD A COLUMN THAT GROUPS HUMANS/MODELS
df_results <- df_results %>%
mutate(model_type = case_when(
grepl("joint-loss_prosody-embed", modality) ~ "joint-prosody",
grepl("clm-loss_prosody-embed", modality) ~ "clm-prosody",
TRUE ~ "clm"  # Default case
))
df_results <- df_results[grepl("helsinki", df_results$model_name),]
# ADD A COLUMN THAT GROUPS HUMANS/MODELS
df_results <- df_results %>%
mutate(dataset = case_when(
grepl("helsinki", modality) ~ "helsinki",
grepl("gigaspeech", modality) ~ "gigaspeech",
))
# set order of variables
df_results$model_type <- factor(df_results$model_type, levels = c("joint-prosody", "clm-prosody", "clm"))
# Set the variable types
factor_columns <- c('modality', 'word_index', 'task', 'model_type', 'dataset')
df_results <- convert_columns_to_factors(df_results, factor_columns)
prosody_results_fn<-glue('{results_dir}all-task_group-analyzed-behavior_human-lemmatized_prosody.csv')
df_prosody_results <- read.csv(prosody_results_fn)
df_prosody_results <- df_prosody_results[df_prosody_results$word_index %in% df_results$word_index, ]
# Get unique combinations of modality, model_name, and task
unique_combinations <- df_results %>%
distinct(modality, task)
# Initialize an empty dataframe to store the merged data
merged_df <- data.frame()
# Iterate through the unique combinations and merge the data
for (i in 1:nrow(unique_combinations)) {
modality <- unique_combinations$modality[i]
task <- unique_combinations$task[i]
# Filter df_results to get the current row
current_row <- df_results %>%
filter(modality == !!modality, task == !!task)
# Filter df_prosody_results to get the matching prosody_mean
prosody_mean <- df_prosody_results %>%
filter(modality == 'audio', task == !!task) %>%
pull(prosody_mean)
# Add the prosody_mean to the current_row and append to the merged_df
current_row$prosody_mean <- prosody_mean
merged_df <- rbind(merged_df, current_row)
}
df_results <- merged_df
df_results$accuracy <- df_results$accuracy / 100
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
head(df_results)
# Load the results file
results_fn<-glue('{results_dir}all-task_group-analyzed-behavior_window-size-25_human-prosody-model-lemmatized.csv')
df_results <- read.csv(results_fn)
df_results <- df_results[!(df_results$modality %in% c('audio', 'text')),]
# ADD A COLUMN THAT GROUPS HUMANS/MODELS
df_results <- df_results %>%
mutate(model_type = case_when(
grepl("joint-loss_prosody-embed", modality) ~ "joint-prosody",
grepl("clm-loss_prosody-embed", modality) ~ "clm-prosody",
TRUE ~ "clm"  # Default case
))
df_results <- df_results[grepl("helsinki", df_results$model_name),]
# # ADD A COLUMN THAT GROUPS HUMANS/MODELS
# df_results <- df_results %>%
#   mutate(dataset = case_when(
#     grepl("helsinki", modality) ~ "helsinki",
#     grepl("gigaspeech", modality) ~ "gigaspeech",
#   ))
# set order of variables
df_results$model_type <- factor(df_results$model_type, levels = c("joint-prosody", "clm-prosody", "clm"))
# Set the variable types
factor_columns <- c('modality', 'word_index', 'task', 'model_type', 'dataset')
df_results <- convert_columns_to_factors(df_results, factor_columns)
head(df_results)
# Load the results file
results_fn<-glue('{results_dir}all-task_group-analyzed-behavior_window-size-25_human-prosody-model-lemmatized.csv')
df_results <- read.csv(results_fn)
df_results <- df_results[!(df_results$modality %in% c('audio', 'text')),]
# ADD A COLUMN THAT GROUPS HUMANS/MODELS
df_results <- df_results %>%
mutate(model_type = case_when(
grepl("joint-loss_prosody-embed", modality) ~ "joint-prosody",
grepl("clm-loss_prosody-embed", modality) ~ "clm-prosody",
TRUE ~ "clm"  # Default case
))
df_results <- df_results[grepl("helsinki", df_results$modality),]
# ADD A COLUMN THAT GROUPS HUMANS/MODELS
df_results <- df_results %>%
mutate(dataset = case_when(
grepl("helsinki", modality) ~ "helsinki",
grepl("gigaspeech", modality) ~ "gigaspeech",
))
# set order of variables
df_results$model_type <- factor(df_results$model_type, levels = c("joint-prosody", "clm-prosody", "clm"))
# Set the variable types
factor_columns <- c('modality', 'word_index', 'task', 'model_type', 'dataset')
df_results <- convert_columns_to_factors(df_results, factor_columns)
prosody_results_fn<-glue('{results_dir}all-task_group-analyzed-behavior_human-lemmatized_prosody.csv')
df_prosody_results <- read.csv(prosody_results_fn)
df_prosody_results <- df_prosody_results[df_prosody_results$word_index %in% df_results$word_index, ]
# Get unique combinations of modality, model_name, and task
unique_combinations <- df_results %>%
distinct(modality, task)
# Initialize an empty dataframe to store the merged data
merged_df <- data.frame()
# Iterate through the unique combinations and merge the data
for (i in 1:nrow(unique_combinations)) {
modality <- unique_combinations$modality[i]
task <- unique_combinations$task[i]
# Filter df_results to get the current row
current_row <- df_results %>%
filter(modality == !!modality, task == !!task)
# Filter df_prosody_results to get the matching prosody_mean
prosody_mean <- df_prosody_results %>%
filter(modality == 'audio', task == !!task) %>%
pull(prosody_mean)
# Add the prosody_mean to the current_row and append to the merged_df
current_row$prosody_mean <- prosody_mean
merged_df <- rbind(merged_df, current_row)
}
df_results <- merged_df
df_results$accuracy <- df_results$accuracy / 100
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'accuracy ~ model_type + (1|dataset) + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results, family=binomial(link='logit')) #, REML=FALSE)
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'accuracy ~ model_type + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results, family=binomial(link='logit')) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'accuracy ~ model_type'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results, family=binomial(link='logit')) #, REML=FALSE)
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'accuracy ~ model_type + (1|task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results, family=binomial(link='logit')) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'accuracy ~ model_type + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results, family=binomial(link='logit')) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'accuracy ~ model_type + (1|word_index)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results, family=binomial(link='logit')) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'accuracy ~ model_type + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results, family=binomial(link='logit')) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type + (1|task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
head(df_results)
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type + (1|modality) + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
had(df_results)
head(df_results)
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type * prosody_mean + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type * prosody_mean + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("prosody_mean", "model_type"))
# Load the results file
results_fn<-glue('{results_dir}all-task_group-analyzed-behavior_window-size-25_human-prosody-model-lemmatized.csv')
df_results <- read.csv(results_fn)
df_results <- df_results[!(df_results$modality %in% c('audio', 'text')),]
# ADD A COLUMN THAT GROUPS HUMANS/MODELS
df_results <- df_results %>%
mutate(model_type = case_when(
grepl("joint-loss_prosody-embed", modality) ~ "joint-prosody",
grepl("clm-loss_prosody-embed", modality) ~ "clm-prosody",
TRUE ~ "clm"  # Default case
))
# df_results <- df_results[grepl("helsinki", df_results$modality),]
# ADD A COLUMN THAT GROUPS HUMANS/MODELS
df_results <- df_results %>%
mutate(dataset = case_when(
grepl("helsinki", modality) ~ "helsinki",
grepl("gigaspeech", modality) ~ "gigaspeech",
))
# set order of variables
df_results$model_type <- factor(df_results$model_type, levels = c("joint-prosody", "clm-prosody", "clm"))
# Set the variable types
factor_columns <- c('modality', 'word_index', 'task', 'model_type', 'dataset')
df_results <- convert_columns_to_factors(df_results, factor_columns)
prosody_results_fn<-glue('{results_dir}all-task_group-analyzed-behavior_human-lemmatized_prosody.csv')
df_prosody_results <- read.csv(prosody_results_fn)
df_prosody_results <- df_prosody_results[df_prosody_results$word_index %in% df_results$word_index, ]
# Get unique combinations of modality, model_name, and task
unique_combinations <- df_results %>%
distinct(modality, task)
# Initialize an empty dataframe to store the merged data
merged_df <- data.frame()
# Iterate through the unique combinations and merge the data
for (i in 1:nrow(unique_combinations)) {
modality <- unique_combinations$modality[i]
task <- unique_combinations$task[i]
# Filter df_results to get the current row
current_row <- df_results %>%
filter(modality == !!modality, task == !!task)
# Filter df_prosody_results to get the matching prosody_mean
prosody_mean <- df_prosody_results %>%
filter(modality == 'audio', task == !!task) %>%
pull(prosody_mean)
# Add the prosody_mean to the current_row and append to the merged_df
current_row$prosody_mean <- prosody_mean
merged_df <- rbind(merged_df, current_row)
}
df_results <- merged_df
df_results$accuracy <- df_results$accuracy / 100
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type * prosody_mean + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("prosody_mean", "model_type"))
# Load the results file
results_fn<-glue('{results_dir}all-task_group-analyzed-behavior_window-size-100_human-prosody-model-lemmatized.csv')
df_results <- read.csv(results_fn)
df_results <- df_results[!(df_results$modality %in% c('audio', 'text')),]
# ADD A COLUMN THAT GROUPS HUMANS/MODELS
df_results <- df_results %>%
mutate(model_type = case_when(
grepl("joint-loss_prosody-embed", modality) ~ "joint-prosody",
grepl("clm-loss_prosody-embed", modality) ~ "clm-prosody",
TRUE ~ "clm"  # Default case
))
# df_results <- df_results[grepl("helsinki", df_results$modality),]
# ADD A COLUMN THAT GROUPS HUMANS/MODELS
df_results <- df_results %>%
mutate(dataset = case_when(
grepl("helsinki", modality) ~ "helsinki",
grepl("gigaspeech", modality) ~ "gigaspeech",
))
# set order of variables
df_results$model_type <- factor(df_results$model_type, levels = c("joint-prosody", "clm-prosody", "clm"))
# Set the variable types
factor_columns <- c('modality', 'word_index', 'task', 'model_type', 'dataset')
df_results <- convert_columns_to_factors(df_results, factor_columns)
prosody_results_fn<-glue('{results_dir}all-task_group-analyzed-behavior_human-lemmatized_prosody.csv')
df_prosody_results <- read.csv(prosody_results_fn)
df_prosody_results <- df_prosody_results[df_prosody_results$word_index %in% df_results$word_index, ]
# Get unique combinations of modality, model_name, and task
unique_combinations <- df_results %>%
distinct(modality, task)
# Initialize an empty dataframe to store the merged data
merged_df <- data.frame()
# Iterate through the unique combinations and merge the data
for (i in 1:nrow(unique_combinations)) {
modality <- unique_combinations$modality[i]
task <- unique_combinations$task[i]
# Filter df_results to get the current row
current_row <- df_results %>%
filter(modality == !!modality, task == !!task)
# Filter df_prosody_results to get the matching prosody_mean
prosody_mean <- df_prosody_results %>%
filter(modality == 'audio', task == !!task) %>%
pull(prosody_mean)
# Add the prosody_mean to the current_row and append to the merged_df
current_row$prosody_mean <- prosody_mean
merged_df <- rbind(merged_df, current_row)
}
df_results <- merged_df
df_results$accuracy <- df_results$accuracy / 100
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type * prosody_mean + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("prosody_mean", "model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("prosody_mean", "model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'accuracy ~ model_type + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results, family=binomial(link='logit'))
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type * entropy + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("prosody_mean", "model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'fasttext_avg_accuracy ~ model_type * entropy + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("entropy", "model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'entropy ~ model_type * prosody_mean + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("entropy", "model_type"))
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'entropy ~ model_type * prosody_mean + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("prosody_mean", "model_type"))
# Load the results file
results_fn<-glue('{results_dir}all-task_group-analyzed-behavior_window-size-25_human-prosody-model-lemmatized.csv')
df_results <- read.csv(results_fn)
df_results <- df_results[!(df_results$modality %in% c('audio', 'text')),]
# ADD A COLUMN THAT GROUPS HUMANS/MODELS
df_results <- df_results %>%
mutate(model_type = case_when(
grepl("joint-loss_prosody-embed", modality) ~ "joint-prosody",
grepl("clm-loss_prosody-embed", modality) ~ "clm-prosody",
TRUE ~ "clm"  # Default case
))
# df_results <- df_results[grepl("helsinki", df_results$modality),]
# ADD A COLUMN THAT GROUPS HUMANS/MODELS
df_results <- df_results %>%
mutate(dataset = case_when(
grepl("helsinki", modality) ~ "helsinki",
grepl("gigaspeech", modality) ~ "gigaspeech",
))
# set order of variables
df_results$model_type <- factor(df_results$model_type, levels = c("joint-prosody", "clm-prosody", "clm"))
# Set the variable types
factor_columns <- c('modality', 'word_index', 'task', 'model_type', 'dataset')
df_results <- convert_columns_to_factors(df_results, factor_columns)
prosody_results_fn<-glue('{results_dir}all-task_group-analyzed-behavior_human-lemmatized_prosody.csv')
df_prosody_results <- read.csv(prosody_results_fn)
df_prosody_results <- df_prosody_results[df_prosody_results$word_index %in% df_results$word_index, ]
# Get unique combinations of modality, model_name, and task
unique_combinations <- df_results %>%
distinct(modality, task)
# Initialize an empty dataframe to store the merged data
merged_df <- data.frame()
# Iterate through the unique combinations and merge the data
for (i in 1:nrow(unique_combinations)) {
modality <- unique_combinations$modality[i]
task <- unique_combinations$task[i]
# Filter df_results to get the current row
current_row <- df_results %>%
filter(modality == !!modality, task == !!task)
# Filter df_prosody_results to get the matching prosody_mean
prosody_mean <- df_prosody_results %>%
filter(modality == 'audio', task == !!task) %>%
pull(prosody_mean)
# Add the prosody_mean to the current_row and append to the merged_df
current_row$prosody_mean <- prosody_mean
merged_df <- rbind(merged_df, current_row)
}
df_results <- merged_df
df_results$accuracy <- df_results$accuracy / 100
clm_joint_prosody <- contr.poly(length(unique(merged_df$model_type)))
contrasts(merged_df$model_type) <- cbind(clm_joint_prosody)
accuracy_formula <- 'entropy ~ model_type * prosody_mean + (1|word_index:task)'
# # Fit the linear mixed-effects model
model <- glmer(accuracy_formula, data = df_results) #, REML=FALSE)
# report (model)
tab_model(model)
#
# check_collinearity(model)
plot_model(model, type='pred', terms=c("prosody_mean", "model_type"))
