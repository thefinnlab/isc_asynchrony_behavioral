# reasons you might want to use `environment.yaml` instead of `requirements.txt`:
# - pip installs packages in a loop, without ensuring dependencies across all packages
#   are fulfilled simultaneously, but conda achieves proper dependency control across
#   all packages
# - conda allows for installing packages without requiring certain compilers or
#   libraries to be available in the system, since it installs precompiled binaries

channels:
  - pytorch
  - conda-forge
  - defaults

# it is strongly recommended to specify versions of packages installed through conda
# to avoid situation when version-unspecified packages install their latest major
# versions which can sometimes break things

# current approach below keeps the dependencies in the same major versions across all
# users, but allows for different minor and patch versions of packages where backwards
# compatibility is usually guaranteed

dependencies:
  - pytorch=2.*
  - torchvision=0.*
  - torchaudio
  - einops
  - lightning=2.*
  - torchmetrics=0.*
  - hydra-core=1.*
  - rich=13.*
  - pre-commit=3.*
  - pytest=7.*
  - huggingface_hub
  - transformers
  - datasets
  - tqdm
  - nltk
  - scikit-learn
  - scipy<1.13
  - jupyter
  - seaborn
  - matplotlib
  - librosa
  - gensim
  
  # --------- loggers --------- #
  - wandb
  # - neptune-client
  # - mlflow
  # - comet-ml

  - pycwt
  - pyyaml
  - pysoundfile

  - pip>=23
  - pip:
      - whisper
      - opencv-python
      - ffmpeg-python
      - sentencepiece
      - mediapipe
      - praatio
      - hydra-optuna-sweeper
      - hydra-colorlog
      - pyrootutils
      - syllables
      - pyphen
      - g2p_en
      - peft

      - fasttext

      # Prosody stuff
      - pycwt
      - pyyaml
      - pysoundfile
      - wavio
      - tgt
      - PyQt5
      - pyreaper